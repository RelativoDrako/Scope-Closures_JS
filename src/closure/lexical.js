///npm init -y
/*Closure es la propiedad que permite 
acceder al 치mbito de una funcion exterior
desde una funci칩n interior
Las clausuras se crean cuando se crea una funci칩n
*/
const myGlobal = 0;

function myFunction(){
    const myNumber = 1;
    console.log(myGlobal);

    function parent(){ //funci칩n interna
        const inner = 2;
        console.log(myNumber, myGlobal);

        function child(){
            console.log(inner, myNumber, myGlobal);
        }
        return child();
    }    
    return parent();
}
myFunction();

/*
En este desaf칤o recibir치s dos n칰meros aleatorios por par치metros.

Usando las closures deber치s crear una funci칩n a la cual se pueda llamar en primer lugar con un solo n칰mero y secuencialmente volver a llamarla para completar la suma con el siguiente n칰mero:

La soluci칩n deber치 tener un input y output como la siguiente, en algunos casos puede que no se mande el segundo n칰mero por lo que deber치s pensar en como manejar ese tipo de casos.

Input:

sumWithClosure(2)(3);

Output:

5

Input:

sumWithClosure(90)();

Output:

90
*/

export function sumWithClosure(firstNum) {
    // Tu c칩digo aqu칤 游녣
      let a = firstNum;
      return function (secondNum) {
        let b = secondNum;
        if (!b) {
          return a;
        } else {
          return a + b;
        }
      }
    }
  